<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
       default-lazy-init="true">

    <description>Spring公共配置</description>
    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入
    <context:component-scan base-package="oop.kevin.rpcserver">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>                              -->
    <context:component-scan base-package="oop.kevin.rpcserver">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <!--        <context:include-filter type="annotation" expression="com.alibaba.dubbo.config.annotation.Service" />-->
    </context:component-scan>

    <!-- 配置文件 -->
    <bean id="propertyConfigurer" class=" org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="ignoreResourceNotFound" value="false"/>
        <property name="locations">
            <list>
                <value>classpath*:jdbc.properties</value>
                <value>classpath*:data.properties</value>
            </list>
        </property>
    </bean>
    <!-- production环境 -->
    <!--<context:property-placeholder ignore-unresolvable="true"
                                  location="classpath*:jdbc.properties" />-->

    <bean id="dataSourceread" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--<property name="driverClassName" value="${driver}" />-->
        <property name="url" value="jdbc:mysql://219.232.227.88:3306/sdedu"/>
        <property name="username" value="shanren"/>
        <property name="password" value="shanren"/>
        <property name="initialSize" value="5"/>
        <property name="maxActive" value="20"/>
    </bean>
    <bean id="resolveDataAndAsync" class="oop.kevin.rpcserver.ResolveDataAndAsync"/>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSourceread"/>
    </bean>

    <!--    <context:annotation-config />-->
    <!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
    <bean class=" org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" lazy-init="false"/>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
       <property name="dataSource" ref="dataSource-read" />
    </bean>  -->

    <!-- 创建SqlSessionFactory，同时指定数据源
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <property name="dataSource" ref="dataSource-read" />
        </bean>                               -->

    <!-- 可通过注解控制事务
       <tx:annotation-driven />        -->
    <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper
    <bean class="org.mybatis.spring.mybatis.MapperScannerConfigurer">
<property name="basePackage" value="oop.kevin.rpcserver.dao" />
</bean>          -->

</beans>